*************************************MIDDLE OF LINKED LIST*********************************
Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.
Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Contraints:

The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100

CODE*********************************
class Solution {
    public ListNode middleNode(ListNode head) {

        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;

        }
        return slow;
    
    }
}

EXPLANATION****************************
here we are following a two pointer approach one is slow and another fast
we are differentiating in odd and even --->
FOR ODD--->the next of fast is null so loop should not work.
FOR EVEN--->the fast is equal to null so loop should stop.